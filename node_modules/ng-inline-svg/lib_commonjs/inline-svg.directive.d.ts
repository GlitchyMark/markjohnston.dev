import { ComponentFactoryResolver, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, ViewContainerRef } from '@angular/core';
import { SVGCacheService } from './svg-cache.service';
import { InlineSVGService } from './inline-svg.service';
import { SVGScriptEvalMode, InlineSVGConfig } from './inline-svg.config';
import * as ɵngcc0 from '@angular/core';
export declare class InlineSVGDirective implements OnInit, OnChanges, OnDestroy {
    private _el;
    private _viewContainerRef;
    private _resolver;
    private _svgCache;
    private _renderer;
    private _inlineSVGService;
    private _config;
    private platformId;
    inlineSVG: string;
    resolveSVGUrl: boolean;
    replaceContents: boolean;
    prepend: boolean;
    injectComponent: boolean;
    cacheSVG: boolean;
    setSVGAttributes: {
        [key: string]: any;
    };
    removeSVGAttributes: Array<string>;
    forceEvalStyles: boolean;
    evalScripts: SVGScriptEvalMode;
    fallbackImgUrl: string;
    onSVGLoaded: (svg: SVGElement, parent: Element | null) => SVGElement;
    onSVGInserted: EventEmitter<SVGElement>;
    onSVGFailed: EventEmitter<any>;
    private _supportsSVG;
    private _prevUrl;
    private _svgComp;
    private _subscription;
    constructor(_el: ElementRef, _viewContainerRef: ViewContainerRef, _resolver: ComponentFactoryResolver, _svgCache: SVGCacheService, _renderer: Renderer2, _inlineSVGService: InlineSVGService, _config: InlineSVGConfig, platformId: Object);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private _insertSVG;
    private _processSvg;
    private _insertEl;
    private _fail;
    private _isValidPlatform;
    private _isSSRDisabled;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InlineSVGDirective, [null, null, null, null, null, null, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<InlineSVGDirective, "[inlineSVG]", never, { "resolveSVGUrl": "resolveSVGUrl"; "replaceContents": "replaceContents"; "prepend": "prepend"; "injectComponent": "injectComponent"; "cacheSVG": "cacheSVG"; "forceEvalStyles": "forceEvalStyles"; "evalScripts": "evalScripts"; "inlineSVG": "inlineSVG"; "setSVGAttributes": "setSVGAttributes"; "removeSVGAttributes": "removeSVGAttributes"; "fallbackImgUrl": "fallbackImgUrl"; "onSVGLoaded": "onSVGLoaded"; }, { "onSVGInserted": "onSVGInserted"; "onSVGFailed": "onSVGFailed"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLXN2Zy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiaW5saW5lLXN2Zy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcywgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU1ZHQ2FjaGVTZXJ2aWNlIH0gZnJvbSAnLi9zdmctY2FjaGUuc2VydmljZSc7XG5pbXBvcnQgeyBJbmxpbmVTVkdTZXJ2aWNlIH0gZnJvbSAnLi9pbmxpbmUtc3ZnLnNlcnZpY2UnO1xuaW1wb3J0IHsgU1ZHU2NyaXB0RXZhbE1vZGUsIElubGluZVNWR0NvbmZpZyB9IGZyb20gJy4vaW5saW5lLXN2Zy5jb25maWcnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSW5saW5lU1ZHRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfZWw7XG4gICAgcHJpdmF0ZSBfdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIF9yZXNvbHZlcjtcbiAgICBwcml2YXRlIF9zdmdDYWNoZTtcbiAgICBwcml2YXRlIF9yZW5kZXJlcjtcbiAgICBwcml2YXRlIF9pbmxpbmVTVkdTZXJ2aWNlO1xuICAgIHByaXZhdGUgX2NvbmZpZztcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XG4gICAgaW5saW5lU1ZHOiBzdHJpbmc7XG4gICAgcmVzb2x2ZVNWR1VybDogYm9vbGVhbjtcbiAgICByZXBsYWNlQ29udGVudHM6IGJvb2xlYW47XG4gICAgcHJlcGVuZDogYm9vbGVhbjtcbiAgICBpbmplY3RDb21wb25lbnQ6IGJvb2xlYW47XG4gICAgY2FjaGVTVkc6IGJvb2xlYW47XG4gICAgc2V0U1ZHQXR0cmlidXRlczoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgfTtcbiAgICByZW1vdmVTVkdBdHRyaWJ1dGVzOiBBcnJheTxzdHJpbmc+O1xuICAgIGZvcmNlRXZhbFN0eWxlczogYm9vbGVhbjtcbiAgICBldmFsU2NyaXB0czogU1ZHU2NyaXB0RXZhbE1vZGU7XG4gICAgZmFsbGJhY2tJbWdVcmw6IHN0cmluZztcbiAgICBvblNWR0xvYWRlZDogKHN2ZzogU1ZHRWxlbWVudCwgcGFyZW50OiBFbGVtZW50IHwgbnVsbCkgPT4gU1ZHRWxlbWVudDtcbiAgICBvblNWR0luc2VydGVkOiBFdmVudEVtaXR0ZXI8U1ZHRWxlbWVudD47XG4gICAgb25TVkdGYWlsZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHByaXZhdGUgX3N1cHBvcnRzU1ZHO1xuICAgIHByaXZhdGUgX3ByZXZVcmw7XG4gICAgcHJpdmF0ZSBfc3ZnQ29tcDtcbiAgICBwcml2YXRlIF9zdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3IoX2VsOiBFbGVtZW50UmVmLCBfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgX3Jlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIF9zdmdDYWNoZTogU1ZHQ2FjaGVTZXJ2aWNlLCBfcmVuZGVyZXI6IFJlbmRlcmVyMiwgX2lubGluZVNWR1NlcnZpY2U6IElubGluZVNWR1NlcnZpY2UsIF9jb25maWc6IElubGluZVNWR0NvbmZpZywgcGxhdGZvcm1JZDogT2JqZWN0KTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfaW5zZXJ0U1ZHO1xuICAgIHByaXZhdGUgX3Byb2Nlc3NTdmc7XG4gICAgcHJpdmF0ZSBfaW5zZXJ0RWw7XG4gICAgcHJpdmF0ZSBfZmFpbDtcbiAgICBwcml2YXRlIF9pc1ZhbGlkUGxhdGZvcm07XG4gICAgcHJpdmF0ZSBfaXNTU1JEaXNhYmxlZDtcbn1cbiJdfQ==