import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { NgModule } from '@angular/core';
import { InlineSVGComponent } from './inline-svg.component';
import { InlineSVGConfig } from './inline-svg.config';
import { InlineSVGDirective } from './inline-svg.directive';
var InlineSVGModule = (function () {
    function InlineSVGModule() {
    }
    InlineSVGModule_1 = InlineSVGModule;
    InlineSVGModule.forRoot = function (config) {
        return {
            ngModule: InlineSVGModule_1,
            providers: [
                { provide: InlineSVGConfig, useValue: config }
            ]
        };
    };
    var InlineSVGModule_1;
InlineSVGModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: InlineSVGModule });
InlineSVGModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function InlineSVGModule_Factory(t) { return new (t || InlineSVGModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(InlineSVGModule, { declarations: function () { return [InlineSVGDirective, InlineSVGComponent]; }, exports: function () { return [InlineSVGDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InlineSVGModule, [{
        type: NgModule,
        args: [{
                declarations: [InlineSVGDirective, InlineSVGComponent],
                exports: [InlineSVGDirective],
                entryComponents: [InlineSVGComponent]
            }]
    }], function () { return []; }, null); })();
    return InlineSVGModule;
}());
export { InlineSVGModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLXN2Zy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbImlubGluZS1zdmcubW9kdWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztnREFPd0I7QUFDeEI7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElubGluZVNWR0NvbXBvbmVudCB9IGZyb20gJy4vaW5saW5lLXN2Zy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSW5saW5lU1ZHQ29uZmlnIH0gZnJvbSAnLi9pbmxpbmUtc3ZnLmNvbmZpZyc7XG5pbXBvcnQgeyBJbmxpbmVTVkdEaXJlY3RpdmUgfSBmcm9tICcuL2lubGluZS1zdmcuZGlyZWN0aXZlJztcbnZhciBJbmxpbmVTVkdNb2R1bGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIElubGluZVNWR01vZHVsZSgpIHtcbiAgICB9XG4gICAgSW5saW5lU1ZHTW9kdWxlXzEgPSBJbmxpbmVTVkdNb2R1bGU7XG4gICAgSW5saW5lU1ZHTW9kdWxlLmZvclJvb3QgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogSW5saW5lU1ZHTW9kdWxlXzEsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IElubGluZVNWR0NvbmZpZywgdXNlVmFsdWU6IGNvbmZpZyB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgSW5saW5lU1ZHTW9kdWxlXzE7XG4gICAgSW5saW5lU1ZHTW9kdWxlID0gSW5saW5lU1ZHTW9kdWxlXzEgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgTmdNb2R1bGUoe1xuICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbSW5saW5lU1ZHRGlyZWN0aXZlLCBJbmxpbmVTVkdDb21wb25lbnRdLFxuICAgICAgICAgICAgZXhwb3J0czogW0lubGluZVNWR0RpcmVjdGl2ZV0sXG4gICAgICAgICAgICBlbnRyeUNvbXBvbmVudHM6IFtJbmxpbmVTVkdDb21wb25lbnRdXG4gICAgICAgIH0pXG4gICAgXSwgSW5saW5lU1ZHTW9kdWxlKTtcbiAgICByZXR1cm4gSW5saW5lU1ZHTW9kdWxlO1xufSgpKTtcbmV4cG9ydCB7IElubGluZVNWR01vZHVsZSB9O1xuIl19