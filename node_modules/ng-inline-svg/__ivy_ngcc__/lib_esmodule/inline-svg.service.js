import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable, RendererFactory2 } from '@angular/core';
import * as i0 from "@angular/core";
var InlineSVGService = (function () {
    function InlineSVGService(rendererFactory) {
        this._ranScripts = {};
        this._renderer = rendererFactory.createRenderer(null, null);
    }
    InlineSVGService.prototype.insertEl = function (dir, parentEl, content, replaceContents, prepend) {
        if (replaceContents && !prepend) {
            var parentNode = dir._prevSVG && dir._prevSVG.parentNode;
            if (parentNode) {
                this._renderer.removeChild(parentNode, dir._prevSVG);
            }
            parentEl.innerHTML = '';
        }
        if (prepend) {
            this._renderer.insertBefore(parentEl, content, parentEl.firstChild);
        }
        else {
            this._renderer.appendChild(parentEl, content);
        }
        if (content.nodeName === 'svg') {
            dir._prevSVG = content;
        }
    };
    InlineSVGService.prototype.evalScripts = function (svg, url, evalMode) {
        var scripts = svg.querySelectorAll('script');
        var scriptsToEval = [];
        for (var i = 0; i < scripts.length; i++) {
            var scriptType = scripts[i].getAttribute('type');
            if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript') {
                var script = scripts[i].innerText || scripts[i].textContent;
                scriptsToEval.push(script);
                this._renderer.removeChild(scripts[i].parentNode, scripts[i]);
            }
        }
        if (scriptsToEval.length > 0 && (evalMode === "always" ||
            (evalMode === "once" && !this._ranScripts[url]))) {
            for (var i = 0; i < scriptsToEval.length; i++) {
                new Function(scriptsToEval[i])(window);
            }
            this._ranScripts[url] = true;
        }
    };
    InlineSVGService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function InlineSVGService_Factory() { return new InlineSVGService(i0.ɵɵinject(i0.RendererFactory2)); }, token: InlineSVGService, providedIn: "root" });
    InlineSVGService = __decorate([ __metadata("design:paramtypes", [RendererFactory2])
    ], InlineSVGService);
InlineSVGService.ɵfac = function InlineSVGService_Factory(t) { return new (t || InlineSVGService)(ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2)); };
InlineSVGService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: InlineSVGService, factory: function (t) { return InlineSVGService.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InlineSVGService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.RendererFactory2 }]; }, null); })();
    return InlineSVGService;
}());
export { InlineSVGService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLXN2Zy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJpbmxpbmUtc3ZnLnNlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUlPO0FBQ1A7Ozs7Ozs7O2lGQUF5QjtBQUN6QjtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgUmVuZGVyZXJGYWN0b3J5MiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbnZhciBJbmxpbmVTVkdTZXJ2aWNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbmxpbmVTVkdTZXJ2aWNlKHJlbmRlcmVyRmFjdG9yeSkge1xuICAgICAgICB0aGlzLl9yYW5TY3JpcHRzID0ge307XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXJGYWN0b3J5LmNyZWF0ZVJlbmRlcmVyKG51bGwsIG51bGwpO1xuICAgIH1cbiAgICBJbmxpbmVTVkdTZXJ2aWNlLnByb3RvdHlwZS5pbnNlcnRFbCA9IGZ1bmN0aW9uIChkaXIsIHBhcmVudEVsLCBjb250ZW50LCByZXBsYWNlQ29udGVudHMsIHByZXBlbmQpIHtcbiAgICAgICAgaWYgKHJlcGxhY2VDb250ZW50cyAmJiAhcHJlcGVuZCkge1xuICAgICAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBkaXIuX3ByZXZTVkcgJiYgZGlyLl9wcmV2U1ZHLnBhcmVudE5vZGU7XG4gICAgICAgICAgICBpZiAocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNoaWxkKHBhcmVudE5vZGUsIGRpci5fcHJldlNWRyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnRFbC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlcGVuZCkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuaW5zZXJ0QmVmb3JlKHBhcmVudEVsLCBjb250ZW50LCBwYXJlbnRFbC5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmFwcGVuZENoaWxkKHBhcmVudEVsLCBjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGVudC5ub2RlTmFtZSA9PT0gJ3N2ZycpIHtcbiAgICAgICAgICAgIGRpci5fcHJldlNWRyA9IGNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElubGluZVNWR1NlcnZpY2UucHJvdG90eXBlLmV2YWxTY3JpcHRzID0gZnVuY3Rpb24gKHN2ZywgdXJsLCBldmFsTW9kZSkge1xuICAgICAgICB2YXIgc2NyaXB0cyA9IHN2Zy5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHQnKTtcbiAgICAgICAgdmFyIHNjcmlwdHNUb0V2YWwgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2NyaXB0VHlwZSA9IHNjcmlwdHNbaV0uZ2V0QXR0cmlidXRlKCd0eXBlJyk7XG4gICAgICAgICAgICBpZiAoIXNjcmlwdFR5cGUgfHwgc2NyaXB0VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL2VjbWFzY3JpcHQnIHx8IHNjcmlwdFR5cGUgPT09ICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0Jykge1xuICAgICAgICAgICAgICAgIHZhciBzY3JpcHQgPSBzY3JpcHRzW2ldLmlubmVyVGV4dCB8fCBzY3JpcHRzW2ldLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgIHNjcmlwdHNUb0V2YWwucHVzaChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNoaWxkKHNjcmlwdHNbaV0ucGFyZW50Tm9kZSwgc2NyaXB0c1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjcmlwdHNUb0V2YWwubGVuZ3RoID4gMCAmJiAoZXZhbE1vZGUgPT09IFwiYWx3YXlzXCIgfHxcbiAgICAgICAgICAgIChldmFsTW9kZSA9PT0gXCJvbmNlXCIgJiYgIXRoaXMuX3JhblNjcmlwdHNbdXJsXSkpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjcmlwdHNUb0V2YWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBuZXcgRnVuY3Rpb24oc2NyaXB0c1RvRXZhbFtpXSkod2luZG93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3JhblNjcmlwdHNbdXJsXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElubGluZVNWR1NlcnZpY2UubmdJbmplY3RhYmxlRGVmID0gaTAuybXJtWRlZmluZUluamVjdGFibGUoeyBmYWN0b3J5OiBmdW5jdGlvbiBJbmxpbmVTVkdTZXJ2aWNlX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgSW5saW5lU1ZHU2VydmljZShpMC7Jtcm1aW5qZWN0KGkwLlJlbmRlcmVyRmFjdG9yeTIpKTsgfSwgdG9rZW46IElubGluZVNWR1NlcnZpY2UsIHByb3ZpZGVkSW46IFwicm9vdFwiIH0pO1xuICAgIElubGluZVNWR1NlcnZpY2UgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbUmVuZGVyZXJGYWN0b3J5Ml0pXG4gICAgXSwgSW5saW5lU1ZHU2VydmljZSk7XG4gICAgcmV0dXJuIElubGluZVNWR1NlcnZpY2U7XG59KCkpO1xuZXhwb3J0IHsgSW5saW5lU1ZHU2VydmljZSB9O1xuIl19